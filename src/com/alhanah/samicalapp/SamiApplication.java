package com.alhanah.samicalapp;

import com.alhanah.samicalapp.store.CalendarStore;
import nasiiCalendar.locationBasid.City;
import com.alhanah.samicalapp.store.CityList;
import com.codename1.components.ToastBar;
import static com.codename1.ui.CN.*;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.l10n.L10NManager;
import com.codename1.location.Location;
import com.codename1.location.LocationManager;
import com.codename1.media.Media;
import com.codename1.media.MediaManager;
import com.codename1.payment.PurchaseCallback;
import com.codename1.ui.BrowserComponent;
import com.codename1.ui.Command;
import com.codename1.ui.Display;
import com.codename1.ui.FontImage;
import com.codename1.ui.Image;
import com.codename1.ui.Toolbar;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.layouts.BorderLayout;
import java.io.IOException;
import java.util.Calendar;
import java.util.Date;
import static nasiiCalendar.BasicCalendar.DAY;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
public class SamiApplication implements PurchaseCallback {
    public static final String TAG="ALHANAH";
    MainForm mainForm;
    Form helpForm;
    CalendarStore store;
    private static Resources theme;
    static Media media;
    BrowserComponent browser;
    static SamiApplication app;
    static CityList cityList = new CityList();
    ;
    int cst = 1;

    static City city=City.MAKKA;

    public static City getBasicLocation() {
        return city;
    }

    public static void setBasicCity(City c) {
        city = c;
    }

    public void test() {

        ATest.test();

    }

    public static Image getHanahLogo() {
        Image hanah;
        try {
            hanah = Image.createImage("/alhanah logo 512.png");

        } catch (IOException ex) {
            hanah = FontImage.createMaterial(FontImage.MATERIAL_20MP, new Label().getStyle());
            ex.printStackTrace();
        }
        return hanah;
    }

    public static String getT(String key) {
        //    hussam.println(key);
        String s1 = UIManager.getInstance().getBundle().get(key);
        return s1;
    }

    public static void setT(String key, String eng, String ara) {
        //    hussam.println(key);
        UIManager.getInstance().getBundle().put(key, eng);
        UIManager.getInstance().getBundle().put(key, eng);
        // theme.getL10N(end, ara)
        theme.getL10N("l10n", "ar").put(key, ara);
        theme.getL10N("l10n", "en").put(key, eng);
    }

    public void init(Object context) {
        try {
            app = this;

            store = new CalendarStore();
            Log.deleteLog();
            Log.setLevel(Log.DEBUG);
            Log.p("HUSSAMALJARI 1.0");
            Log.p("HUSSAMALJARI 1.2", Log.ERROR);

            downloadPurchases();
            // use two network threads instead of one
            //    test();
            updateNetworkThreadCount(2);

            theme = UIManager.initFirstTheme("/theme");
            changeLanguage();

            // Enable Toolbar on all Forms by default
            Toolbar.setGlobalToolbar(true);

            // Pro only feature
            Log.bindCrashProtection(true);

            addNetworkErrorListener(err -> {
                // prevent the event from propagating
                err.consume();
                if (err.getError() != null) {
                    Log.e(err.getError());
                }
                Log.sendLogAsync();
                Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
            });
            test();
            prepareCities(null);
            mainProg();
        } catch (Exception e) {
            Log.e(e);
            Log.p(e.getMessage(), Log.ERROR);
            Dialog.show("999" + e.getMessage(), e.getMessage(), e.hashCode()+"", ((e.getCause()==null)?"NUll":e.getCause().toString()));
            Log.p("HUSSAMALJARI 4.0");
            Log.p("HUSSAMALJARI 4.2", Log.ERROR);

        }

    }

    public static void prepareCities(final Runnable run) {
        Thread t = new Thread(new Runnable() {
            @Override
            public void run() {
                if (cityList == null) {
                    System.err.println("city list is null!");
                    cityList = new CityList();
                }
                cityList.getCities();
                Location l;
                try {
                    l = LocationManager.getLocationManager().getCurrentLocation();
                    City location = cityList.getClosestCity(l.getLatitude(), l.getLongitude());
                    city = location;
                    System.err.println("found: " + location);
                } catch (IOException ex) {
                    Log.p(ex.getMessage(), Log.ERROR);//Level.SEVERE, null, ex);
                    Log.p("HUSSAMALJARI 7.0");
                     Log.p("HUSSAMALJARI 7.2", Log.ERROR);

                }
                if (run != null) {
                    System.err.println("calling...serially");
                    callSerially(run);
                }

            }
        });
        t.start();
    }

    public static void printDate(long d) {
        Calendar c = Calendar.getInstance();
        c.setTime(new Date(d));
        //c.setTimeInMillis(d);
        //hussam.println("t: " + d + " date: " + new Date(d) + " year: " + c.get(Calendar.YEAR));

    }

    public static void testDate() {
        Calendar c = Calendar.getInstance();
        c.set(Calendar.YEAR, 1);
        //hussam.println("min: " + Long.MIN_VALUE);
        for (long i = c.getTime().getTime(); i < Long.MAX_VALUE; i -= DAY) {
            printDate(i);
        }
    }

    public void mainProg() {
        theme = UIManager.initFirstTheme("/theme");

        String local = L10NManager.getInstance().getLanguage();
        //   L10NManager.getInstance().setLocale(L10NManager.getInstance().getLocale(), "ar");
        UIManager.getInstance().setBundle(theme.getL10N("l10n", "en"));
        String s1 = UIManager.getInstance().getBundle().get("cancel");
        UIManager.getInstance().setBundle(theme.getL10N("l10n", "ar"));

        String s2 = UIManager.getInstance().getBundle().get("cancel");
        //hussam.println("s1: " + s1 + " s2: " + s2);

        //hussam.println("XXXXXXXXXXXXXXXXXXXXXXX " + local + " " + theme + " " + L10NManager.getInstance().getLocale());
        String x = theme.getL10N("l10n", "ar").get("test");
        String v = theme.getL10N("l10n", "en").get("test");
        //hussam.println("x= arabic(" + x + ") english (" + v + ")");
        //    testDate();
        helpForm = new Form("Help");
        helpForm.setLayout(new BorderLayout());
        browser = new BrowserComponent();
        helpForm.add(BorderLayout.CENTER, browser);
        helpForm.getToolbar().setBackCommand(new Command("Back") {
            @Override
            public void actionPerformed(ActionEvent evt) {
                mainForm.show();
            }

        });

        browser.setURL("https://www.alhanah.com/index.php/2020/09/11/%d8%ad%d8%a7%d9%86%d8%a9-%d8%a7%d9%84%d8%aa%d9%82%d8%a7%d9%88%d9%8a%d9%85-%d8%b9%d9%84%d9%89-%d8%ac%d9%88%d8%ac%d9%84-%d8%a8%d9%84%d8%a7%d9%8a/");
        try {
            Log.p("HUSSAMALJARI 4.0");
            Log.p("HUSSAMALJARI 4.2", Log.ERROR);

            mainForm = new MainForm();

            Log.p("HUSSAMALJARI 5.0");
            Log.p("HUSSAMALJARI 5.2", Log.ERROR);

        } catch (Exception e) {
            Log.p("HUSSAMALJARI 2.0");
            Log.p("HUSSAMALJARI 2.2", Log.ERROR);

            Dialog.show("1: "+getAppVersion() + e.getMessage(), e.getMessage(), "test", "test");
            e.printStackTrace();
            Log.e(e);
            if (e.getCause() != null) {
                Log.p(e.getCause().getMessage(), Log.ERROR);
            }

        }

        start();

    }
    public static String getAppVersion(){
        return Display.getInstance().getProperty("AppVersion", "1.0");
    }
    public void start() {
        try {

            if (mainForm != null) {
                mainForm.show();
                //Dialog.show("test", "test", "test", "test");
                //   return;
            }
        } catch (Exception e) {
            Dialog.show("2" + e.getMessage(), e.getMessage(), "test", "test");
            Log.p("HUSSAMALJARI 3.0");
            Log.p("HUSSAMALJARI 3.2", Log.ERROR);

        }

    }

    public static CalendarStore getStore() {
        return app.store;
    }

    public void stop() {

        Form mainForm = getCurrentForm();
        if (mainForm instanceof Dialog) {
            ((Dialog) mainForm).dispose();

        }
        if (media != null) {
            media.cleanup();
        }
    }

    public static void changeLanguage() {
        String local = L10NManager.getInstance().getLocale();
        String lang = L10NManager.getInstance().getLanguage();
        if (lang.equalsIgnoreCase("ar")) {
            lang = "en";
        } else {
            lang = "ar";
        }
        L10NManager.getInstance().setLocale(local, lang);
        //hussam.println("locale: " + local + " lang: " + lang);

        UIManager.getInstance().setBundle(theme.getL10N("l10n", lang));

    }

    public void destroy() {
    }

    @Override
    public void itemPurchased(String sku) {
        //hussam.println("notified PURCHASED: " + sku);
        downloadPurchases();

        ToastBar.showMessage(getT("thankspurchase") + " " + getStore().getItemName(sku), FontImage.MATERIAL_THUMB_UP);

    }

    @Override
    public void itemPurchaseError(String sku, String errorMessage) {
        ToastBar.showErrorMessage("Failure to purchase: " + sku + " error: " + errorMessage);
        //   mainForm.show();
    }

    @Override
    public void itemRefunded(String errorMessage) {
        ToastBar.showErrorMessage("I dont think I will allow refunds, but this is error: " + errorMessage);
        mainForm.show();
    }

    @Override
    public void subscriptionStarted(String sku) {
        ToastBar.showMessage("Thanks.  Subscription Started for: " + sku, FontImage.MATERIAL_THUMB_UP);
        mainForm.show();

    }

    @Override
    public void subscriptionCanceled(String sku) {
        ToastBar.showMessage("Oh well,.  Subscription canceled for: " + sku, FontImage.MATERIAL_THUMB_UP);
        mainForm.show();

    }

    @Override
    public void paymentFailed(String sku, String errorMessage) {
        ToastBar.showErrorMessage("Failure to make payment for: " + sku + " error: " + errorMessage);
        mainForm.show();

    }

    @Override
    public void paymentSucceeded(String sku, double amout, String currency) {
        ToastBar.showMessage("Thanks.  Your Payment went through for: " + sku + " amount: " + amout + " currency: " + currency, FontImage.MATERIAL_THUMB_UP);

    }

    public void downloadPurchases() {
        store.updatePurchaseList();

        Display.getInstance().callSerially(new Runnable() {
            @Override
            public void run() {
                // MainForm.getForm().showBasket(null);
            }
        });
    }

    public static void playMusic() {
        try {
            media = MediaManager.createMedia((Display.getInstance().getResourceAsStream(SamiApplication.class,
                    "/ibn1.mp3")), "audio/mpeg");
            media.setVolume(25);
            media.play();

        } catch (IOException err) {
            Log.e(err);
        }
        // hi.show();

    }

    public static void playButtonSound() {
        try {
            Media m = MediaManager.createMedia((Display.getInstance().getResourceAsStream(SamiApplication.class,
                    "/ibn1.mp3")), "audio/mpeg");
            m.play();

        } catch (IOException err) {
            Log.e(err);
        }
    }

    public static void stopMusic() {
        if (media == null) {
            return;
        }
        media.pause();
        media.cleanup();
    }

    public static boolean isMusicPlaying() {
        if (media == null) {
            return false;
        }
        return media.isPlaying();
    }

    public static void showHelp(String url) {
        boolean flag = Dialog.show("visitHelp", "visitHelpQuestion", "ok", "cancel");
        if (flag) {
            app.browser.setURL(getT(url));
            app.helpForm.show();
        }
    }
}
